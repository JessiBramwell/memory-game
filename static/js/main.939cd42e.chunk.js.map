{"version":3,"sources":["components/Wrapper/index.js","components/Timer/index.js","components/Stats/index.js","components/Deck/index.js","components/Card/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Timer","timer","Stats","wins","losses","play","components_Timer","onClick","init","Deck","_this","this","Object","classCallCheck","createPair","count","cards","length","forEach","item","card","cardSet","push","objectSpread","id","shuffle","arr","sort","Math","random","Card","image","matchedClass","active","matched","concat","pairId","guess","src","alt","Game","possibleConstructorReturn","getPrototypeOf","call","gameInit","reset","deck","setState","startTimer","state","sec","countDown","setInterval","clearInterval","map","guessHandler","selected","find","el","toConsumableArray","compair","checkWin","setTimeout","every","_this2","components_Wrapper","components_Stats","components_Card","key","Component","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.939cd42e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Wrapper(props) {\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Wrapper; ","import React from 'react';\r\n\r\nfunction Timer(props) {\r\n  \r\n  return (\r\n    <h2>Timer: {props.timer}</h2>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default Timer;","import React from \"react\";\r\nimport Timer from '../Timer';\r\n\r\nfunction Stats(props) {\r\n  \r\n  return (\r\n    <div className=\"stats-block\">\r\n      <h2>Wins: {props.wins}</h2>\r\n      <h2>Losses: {props.losses}</h2>\r\n      \r\n      {props.play ? <Timer timer={props.timer} /> : <button onClick={props.init}>Play</button>}\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Stats;\r\n","import cards from \"../../cards.json\"\r\n\r\nclass Deck {\r\n  constructor() {\r\n    this.cardSet = []\r\n  }\r\n  \r\n  createPair = () => {\r\n    let count = cards.length;\r\n\r\n    cards.forEach(item => {\r\n      let card;\r\n      count++;\r\n\r\n      this.cardSet.push(item);\r\n\r\n      card = { ...item };\r\n      card.id = count;\r\n\r\n      this.cardSet.push(card)\r\n    });\r\n\r\n    return this.shuffle(this.cardSet)\r\n  }\r\n  \r\n  shuffle(arr) {\r\n    arr.sort(() => Math.random() - 0.5);\r\n  }\r\n}\r\n\r\n\r\nexport default Deck;","import React from \"react\";\r\n\r\nfunction Card(props) {\r\n  \r\n  let image, matchedClass;\r\n\r\n  // if active status == true cards flip\r\n  (props.active || props.matched) ? image = `./img/card-${props.pairId}.png` : image = \"./img/back.png\"\r\n  \r\n  // if matched status == true cards add class\r\n  props.matched ? matchedClass = \"matched\" : matchedClass = \"unmatched\";\r\n\r\n\r\n  return (\r\n    <div className=\"col-md-3 col-sm-6\">\r\n      <div className={`single-card d-flex justify-content-center ${matchedClass}`} onClick={() => props.guess(props.id)}>\r\n        <img src={image} alt=\"\" />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport Wrapper from '../Wrapper';\r\nimport Stats from '../Stats';\r\nimport Deck from '../Deck';\r\nimport Card from \"../Card\"\r\n\r\nlet cardSet = []\r\n\r\nclass Game extends Component {\r\n  constructor() {\r\n    super();\r\n    this.deck = new Deck();\r\n    cardSet = this.deck.cardSet\r\n    this.deck.createPair()\r\n  }\r\n\r\n  gameInit = () => {\r\n    this.reset(cardSet)\r\n    this.deck.shuffle(cardSet);\r\n    this.setState({ cardSet, play: true })\r\n    this.startTimer();\r\n  }\r\n\r\n  state = {\r\n    cardSet,\r\n    sec: 60,\r\n    play: false,\r\n    guess: [],\r\n    wins: 0,\r\n    losses: 0\r\n  }\r\n\r\n  startTimer = () => {\r\n    let countDown = 60;\r\n    let losses = this.state.losses;\r\n\r\n    const count = () => {\r\n      if (this.state.sec <= 0) {\r\n        losses++\r\n        clearInterval(this.timer)\r\n        this.setState({\r\n          play: false,\r\n          losses: losses\r\n        });\r\n      } else {\r\n        this.setState({ sec: countDown-- })\r\n      }\r\n    }\r\n\r\n    this.timer = setInterval(count, 1000);\r\n  }\r\n\r\n  reset = () => {\r\n    cardSet.map(item => {\r\n      if (this.state.play) {\r\n        return item.active = false;\r\n      } else {\r\n        return (\r\n          item.active = false,\r\n          item.matched = false\r\n        )\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      guess: [],\r\n      cardSet,\r\n      sec: 60\r\n    });\r\n  }\r\n\r\n  guessHandler = (id) => {\r\n    // find id in array of cards\r\n    let selected = cardSet.find(el => el.id === id);\r\n    selected.active = true;\r\n\r\n    this.setState({\r\n      guess: [...this.state.guess, selected],\r\n      cardSet\r\n    }, () => {\r\n\r\n      this.compair(this.state.guess);\r\n    });\r\n  }\r\n\r\n  compair = (arr) => {\r\n    // compair if guess arr == 2\r\n    if (arr.length === 2) {\r\n      // if pairId match update match status and empty guess array\r\n      if (arr[0].pairId === arr[1].pairId) {\r\n\r\n        arr[0].matched = true\r\n        arr[1].matched = true\r\n        this.setState({ cardSet });\r\n        this.checkWin();\r\n      }\r\n\r\n      setTimeout(() => {\r\n        this.reset(cardSet)\r\n      }, 1000);\r\n\r\n    } else {\r\n      return\r\n    }\r\n\r\n  }\r\n\r\n  checkWin = () => {\r\n    let wins = this.state.wins;\r\n    let matched = cardSet.every(el => el.matched === true); \r\n\r\n    if(matched) {\r\n      wins++\r\n      clearInterval(this.timer);\r\n      this.setState({ \r\n        wins: wins,\r\n        play: false\r\n      })\r\n    } else {\r\n      return\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Wrapper>\r\n        <Stats\r\n          timer={this.state.sec}\r\n          wins={this.state.wins}\r\n          losses={this.state.losses}\r\n          play={this.state.play}\r\n          init={this.gameInit}\r\n        />\r\n        {this.state.cardSet.map(item => (\r\n          <Card\r\n            guess={this.guessHandler}\r\n            id={item.id}\r\n            pairId={item.pairId}\r\n            key={item.id}\r\n            active={item.active}\r\n            matched={item.matched}\r\n          />\r\n        ))}\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Game;\r\n","import React, { Component } from 'react';\nimport Game from \"./components/Game\";\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Game />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}